{"version":3,"sources":["webpack:///src/app/ticketing/ticketing.module.ts","webpack:///src/app/ticketing/ticketing-routing.module.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/ticketing/ticket-details/ticket-details.component.ts","webpack:///src/app/ticketing/ticket-details/ticket-details.component.html","webpack:///src/app/ticketing/ticketing.component.ts","webpack:///src/app/ticketing/ticketing.component.html"],"names":["TicketingModule","declarations","imports","exports","entryComponents","routes","path","component","TicketingRoutingModule","forChild","SharedModule","TicketDetailsComponent","activatedRoute","backendService","loading","params","subscribe","id","ticket","res","user","assigneeId","selector","templateUrl","styleUrls","TicketingComponent","ticketFB","router","_snackBar","users$","users","tickets$","tickets","ticketsDone","ticketsProgress","showAdd","hasFormErrors","maxId","createForm","refreshTickets","TicketsSubscription","map","completed","push","console","log","ticketForm","group","description","required","listUser","event","previousContainer","container","data","previousIndex","currentIndex","ticketID","index","o","indexOf","openSnackBar","controls","invalid","Object","keys","forEach","controlName","markAsTouched","value","lastId","newTicket","reset","id_ticket","navigate","relativeTo","idTicket","userId","assign","idUser","filtredProgressList","filtredDoneList","message","action","open","duration","unsubscribe","encapsulation","None"],"mappings":"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","file":"ticketing-ticketing-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { TicketDetailsComponent } from './ticket-details/ticket-details.component';\r\nimport { TicketingRoutingModule } from './ticketing-routing.module';\r\nimport { TicketingComponent } from './ticketing.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        TicketingComponent, \r\n        TicketDetailsComponent, \r\n    ],\r\n    imports:[\r\n        SharedModule,\r\n        TicketingRoutingModule\r\n    ],\r\n    exports: [],\r\n    entryComponents: [TicketingComponent]\r\n})\r\nexport class TicketingModule {}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TicketDetailsComponent } from './ticket-details/ticket-details.component';\r\nimport { TicketingComponent } from './ticketing.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: TicketingComponent },\r\n    { path: 'ticket-details/:id', component: TicketDetailsComponent }\r\n]\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class TicketingRoutingModule {}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MaterialModule } from '../material.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule,\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule,\r\n  ]\r\n})\r\nexport class SharedModule {}\r\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BackendService } from 'src/app/backend.service';\nimport { Ticket } from 'src/interfaces/ticket.interface';\nimport { User } from 'src/interfaces/user.interface';\n\n@Component({\n  selector: 'app-ticket-details',\n  templateUrl: './ticket-details.component.html',\n  styleUrls: ['./ticket-details.component.css']\n})\nexport class TicketDetailsComponent implements OnInit {\n\n  ticket: Ticket;\n  user: User;\n  loading = true;\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private backendService: BackendService\n  ) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n\t\t\tconst id = params.id;\n\t\t\tif (typeof (id) !== 'undefined' && id != \"\") {\n        this.backendService.ticket(id).subscribe(res => {\n          this.ticket = res;\n          this.backendService.user(this.ticket.assigneeId).subscribe(user => {\n            this.user = user;\n            this.loading = false;\n          });\n\n        })\n\n      }\n    })\n  }\n\n}\n","<mat-card>\n    <mat-spinner *ngIf=\"loading\"></mat-spinner>\n    <div *ngIf=\"ticket && user\">\n        <h2> Ticket N° {{ ticket.id }}</h2>\n        <h1> Description : {{ ticket.description }}</h1>\n        <h3 *ngIf=\"user\"> Pour : {{ user.name }}</h3>\n    </div>\n\n    <button mat-raised-button color=\"primary\" routerLink=\"/\" class=\"mt-40\"  matTooltip=\"Go back\">\n         <i class=\"material-icons\">arrow_back_ios</i>  Back\n    </button>\n</mat-card>","import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { Ticket } from \"src/interfaces/ticket.interface\";\nimport { User } from \"src/interfaces/user.interface\";\nimport { BackendService } from \"../backend.service\";\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  transferArrayItem,\n} from \"@angular/cdk/drag-drop\";\nimport { map } from \"rxjs/operators\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: \"app-ticketing\",\n  templateUrl: \"./ticketing.component.html\",\n  styleUrls: [\"./ticketing.component.css\"],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TicketingComponent implements OnInit {\n  public readonly users$: Observable<User[]> = this.backendService.users();\n  public readonly tickets$: Observable<\n    Ticket[]\n  > = this.backendService.tickets();\n\n  TicketsSubscription: Subscription;\n  ticketsDone: Ticket[] = [];\n  ticketsProgress: Ticket[] = [];\n  tickets: Ticket[] = [];\n  ticketForm: FormGroup;\n  listUser: User[];\n  showAdd = false;\n  loading = true;\n  hasFormErrors = false;\n  maxId = 0;\n\n  constructor(\n    private readonly backendService: BackendService,\n    private ticketFB: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.createForm();\n    this.refreshTickets();\n  }\n\n  refreshTickets() {\n    this.TicketsSubscription = this.tickets$.subscribe((res) => {\n      this.tickets = res;\n      res.map((ticket) => {\n        if (this.maxId < ticket.id) {\n          this.maxId = ticket.id;\n        }\n        if (ticket.completed) {\n          this.ticketsDone.push(ticket);\n        } else {\n          this.ticketsProgress.push(ticket);\n        }\n      });\n      this.loading = false;\n      console.log(++this.maxId)\n    });\n  }\n\n  createForm() {\n    this.ticketForm = this.ticketFB.group({\n      description: new FormControl(\"\", Validators.required),\n      user: new FormControl(\"\", Validators.required),\n    });\n    this.backendService.users().subscribe((res) => {\n      this.listUser = res;\n    });\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n\n      let ticketID = event.container.data[event.currentIndex][\"id\"];\n      var index = this.tickets.map((o) => o.id).indexOf(ticketID);\n      this.tickets[index].completed = !this.tickets[index].completed;\n      /* if(this.tickets[index].completed){\n        this.backendService.complete(this.tickets[index].id, this.tickets[index].completed).subscribe(res=> {\n        })\n      } */\n      this.openSnackBar('Ticket Updated', 'OK')\n    }\n  }\n\n  addTicket() {\n    this.loading = true;\n    this.hasFormErrors = false;\n    const controls = this.ticketForm.controls;\n    /** check form */\n    if (this.ticketForm.invalid) {\n      Object.keys(controls).forEach((controlName) =>\n        controls[controlName].markAsTouched()\n      );\n      this.hasFormErrors = true;\n      return;\n    }\n\n    let ticket = {\n      description: controls.description.value,\n      user: controls.user.value,\n      lastId: ++this.maxId,\n    };\n\n    this.backendService.newTicket(ticket).subscribe((res) => {\n      console.log(res);\n      this.ticketsProgress.push(res);\n      this.ticketForm.reset();\n      this.loading = false;\n    });\n  }\n\n  detailsTicket(id_ticket) {\n    this.router.navigate([\"./ticket-details/\" + id_ticket], {\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  updateTicket(idTicket, userId){\n    this.backendService.assign(idTicket, userId).subscribe(res => {\n      this.openSnackBar('Ticket Updated', 'OK')\n    })\n  }\n\n  changeUser(idUser){\n    \n    \n    let filtredProgressList = [];\n    let filtredDoneList = [];\n\n    this.tickets.map(ticket => {\n      if(ticket.assigneeId === idUser){\n        if(ticket.completed){\n          filtredDoneList.push(ticket);\n        }else{\n          filtredProgressList.push(ticket);\n        }\n      }\n    });\n\n    this.ticketsProgress = filtredProgressList;\n    this.ticketsDone = filtredDoneList;\n    \n  }\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.TicketsSubscription) {\n      this.TicketsSubscription.unsubscribe();\n    }\n  }\n}\n","<h1>Tickets</h1>\n<button mat-raised-button color=\"primary\" class=\"mt-40\" (click)=\"showAdd = !showAdd\" matTooltip=\"Ajouter Ticket\">\n    Ajouter Ticket <i class=\"material-icons\">add_circle_outline</i>\n</button>\n<br><br>\n<mat-card *ngIf=\"listUser && showAdd\">\n    <form [formGroup]=\"ticketForm\" class=\"form\">\n        <mat-form-field class=\"mat-form-field-fluid\">\n            <input matInput placeholder=\"Description\" formControlName=\"description\">\n            <mat-error>\n                Description\n                <strong>obligatoire</strong>\n            </mat-error>\n            <mat-hint align=\"start\">Veuillez remplir la\n                <strong>Description</strong>\n            </mat-hint>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-label>Utilisateur</mat-label>\n            <mat-select formControlName=\"user\">\n                <mat-option *ngFor=\"let user of listUser\" [value]=\"user.id\">{{ user.name }}</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button mat-raised-button color=\"primary\" class=\"ml-3\" (click)=\"addTicket()\"\n            [disabled]=\"loading || ticketForm.invalid\">Enregistrer</button>\n    </form>\n</mat-card>\n\n<mat-card>\n\n    <mat-card-header>\n        <mat-card-title>Liste des tickets (Drag & Drop to change status)</mat-card-title>\n    </mat-card-header>\n    <mat-spinner *ngIf=\"loading\"></mat-spinner>\n    <br>\n    <mat-card-content>\n        <div class=\"col-md-4\" *ngIf=\"listUser\">\n            <mat-form-field>\n                <mat-label>Filtrer par Utilisateur </mat-label>\n                <mat-select (selectionChange)=\"changeUser($event.value)\">\n                    <mat-option *ngFor=\"let user of listUser\" [value]=\"user.id\"> {{ user.name }} </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n\n        <div cdkDropListGroup *ngIf=\"!loading\">\n            <div class=\"example-container\">\n                <h2>To do</h2>\n                <div cdkDropList [cdkDropListData]=\"ticketsProgress\" class=\"example-list\"\n                    (cdkDropListDropped)=\"drop($event)\">\n                    <div class=\"example-box\" *ngFor=\"let ticket of ticketsProgress\" cdkDrag>\n                        <div *ngIf='!ticket.completed'>\n                            Ticket: {{ ticket.id }}, {{ticket.description}}\n                            <button mat-icon-button matTooltip=\"Détails\">\n                                <i class=\"material-icons\" (click)=\"detailsTicket(ticket.id)\">info</i>\n                            </button>\n                            <div>\n                                <mat-form-field>\n                                    <mat-label>Assign To</mat-label>\n                                    <mat-select [(value)]=\"ticket.assigneeId\"\n                                        (selectionChange)=\"updateTicket(ticket.id, $event.value)\">\n                                        <mat-option *ngFor=\"let user of listUser\" [value]=\"user.id\">{{ user.name }}\n                                        </mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"example-container\">\n                <h2>Done</h2>\n                <div cdkDropList [cdkDropListData]=\"ticketsDone\" class=\"example-list\"\n                    (cdkDropListDropped)=\"drop($event)\">\n                    <div class=\"example-box\" *ngFor=\"let ticket of ticketsDone\" cdkDrag>\n                        <div *ngIf='ticket.completed'>\n                            Ticket: {{ ticket.id }}, {{ticket.description}}\n                            <button mat-icon-button matTooltip=\"Détails\" routerLink=\"/ticket-details\">\n                                <i class=\"material-icons\" (click)=\"detailsTicket(ticket.id)\">info</i>\n                            </button>\n                            <mat-form-field>\n                                <mat-label>Assign To</mat-label>\n                                <mat-select [(value)]=\"ticket.assigneeId\"\n                                    (selectionChange)=\"updateTicket(ticket.id, $event.value)\">\n                                    <mat-option *ngFor=\"let user of listUser\" [value]=\"user.id\">{{ user.name }}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-card-content>\n</mat-card>"]}